# -*- encoding:utf-8 Mode: POLY-ORG;  -*- --- 
#+STARTUP: noindent









UWAGA - JEDNA SPRAWA:
Wygodne konstruowanie entities, np. dodawanie komponentow.
Teraz trzeba glupowato tworzyc tak:
   (let [entity (mk-entity....)]
zeby dodawac komponenty przez assoc,
i w dodatku przekazywac entity do konstruktorow komponentow.
Bez sensu.

Niech bedzie tak, ze komponent *mozna* stworzyc bez entity,
taki nie podpiety, z :entity-id = nil, a potem wstawienie
go do entity bedzie tak naprawde polegalo na:
   - zmodyfikowaniu komponentu przez ustawienie mu :entity-id
   - dodaniu go do entity
   - i takie zmodyfikowane entity zwracamy

Czyli:

(->> (mk-entity ...)
     (ecs/with-component :engine (sys-movement/mk-engine <argumenty, ale nie entity-id, bo nie znamy>))
     (ecs/with-component ...
     (ecs/with-component ...
)

Btw. "expression problem" !!!
Jezeli jakas nazwa funkcji mialaby miec sens dla roznych obiektow,
to wtedy multi-metoda (choc moze i case w funkcji, jesli z gory wiadomo,
jakie moga byc rodzaje obiektow).









* Helper schemas

  Sometimes we'll want a schema to say that we accept any value at all:

  #+BEGIN_SRC clojure
    (defn anything? [x] true)
  #+END_SRC

* Objects and object id's and keys

  Each object will be a plain /map/ with a mandatory key =::kind= to tell the
  kind of object. We have four kinds of objects and so four possible values
  of the key:

  #+BEGIN_SRC clojure
    (s/def ::kind #{:world :system :component :entity})
  #+END_SRC

  Certain kinds of objects (all except world in fact) will have additional
  required keys with the purpose of uniquely identifying the particular object
  and those will form the object identifier, or /object id/. For some kinds
  we'll require /more/ information in the object id, just to help in lookup and
  dispatch operations. In any case, an object id will be a sub-map of the actual
  object. We'll define schemas for each kind of object id below, but we also
  want to have a schema for any object id at all:

  #+BEGIN_SRC clojure
    (s/def ::id (s/or :world     ::world-id
                      :system    ::system-id
                      :component ::component-id
                      :entity    ::entity-id))
  #+END_SRC

  Similarly, we define a schema for an object, postponing the definition of schemas
  for particular kinds until later:
  
  #+BEGIN_SRC clojure
    (s/def ::object (s/or :world     ::world
                          :system    ::system
                          :component ::component
                          :entity    ::entity))
  #+END_SRC

  To reiterate, an object id is a sub-map of the object, but since schemas are
  open-ended, also the whole object, with more keys in the map, can serve as its
  own identifier. In other words, if a value matches the =::object= schema, it
  will also match the =::id= schema. It will become apparent when we get to
  defining the particular kinds of objects.

  In most object id definitions we'll use a /key/, being just a keyword
  (or sometimes a number), to uniquely identify the object among its kind (or
  within a parent object), so for example an entity id will consist of the
  =::kind= key with value =:entity= and an additional key =::entity-key= with a
  keyword or integer value, for example ={::kind :entity, ::entity-key 10}=. So
  in a context where we know that we're talking only about entities, the value
  of the entity key (e.g. 10) will be enough to identify an entity. In
  general usage, however, we recommend employing full object identifiers.

* API Conventions  

  Since an object can stand for its own identifier and sometimes in context an
  object key is as good as an identifier, we'll want to make our API flexible
  and make function parameters accept any of those forms of object
  identification whenever that makes sense. This will be apparent both in the
  implementation and in the schemas of the API functions, but we will also make
  a naming convention for such parameters. The convention is: adding an asterisk
  to the end of the name of a parameter. The semantic rules can be informally
  presented like this:

  =key < id < object=

  More specifically, a parameter name ending with =-key*= means that it can
  accept a key, an id or an object, for example =entity-key*= will be a
  parameter that can accept an entity key, an entity id or an entity object.

  Similarly, a parameter ending with =-id*= will accept either an id or an
  object, but /not/ a key.

* World

  There can be only one world, so to identify the world we only need to provide
  the =::kind=, so here's a schema for the world id and the world portion of the
  =::id= schema:

  #+BEGIN_SRC clojure
    (s/def ::world-id (s/and (s/keys :req [::kind]) #(= :world (::kind %))))
    (defmethod id-spec :world [_] ::world-id)
  #+END_SRC

  Here are schemas for the world object:

  #+BEGIN_SRC clojure
    (s/def ::world
      (s/and
       (s/keys :req [::kind ::entities ::systems ::time ::event-queue])
       #(= :world (::kind %))))

    (defmethod object-spec :world [_] ::world)
  #+END_SRC

  As we could see above, a world object holds everything:

  the map of entities (which will contain components):

  #+BEGIN_SRC clojure
  (s/def ::entities (s/map-of ::entity-key ::entity))
  #+END_SRC

  the map of systems:

  #+BEGIN_SRC clojure
  (s/def ::systems (s/map-of ::system-key ::system))
  #+END_SRC

  current time:

  #+BEGIN_SRC clojure
  (s/def ::time integer?)
  #+END_SRC

  and an event queue (TODO: spec in that module).

  Here's a function to create a new, empty world object:

  #+BEGIN_SRC clojure

    (defn world []
      {::kind :world
       ::entities {}
       ::systems {}
       ::time 0
       ::event-queue (eq/create)})
    (s/fdef world
      :args (s/cat)
      :ret (s/and ::world ::world-id ::id))

  #+END_SRC

  and functions to create the world id and to check if a given value (any value)
  is a world id or not:

  #+BEGIN_SRC clojure
    (defn world-id [] {::kind :world})
    (s/fdef world-id :args (s/cat) :ret (s/and ::world-id ::id))

    (defn world-id? [x] (= (::kind x) :world))
    (s/fdef world-id? :args (s/cat :x anything?) :ret (s/and boolean?))

  #+END_SRC

* System

A system is also a very simple object: a system is identified by a system key
and a system object has no more mandatory content than a system id:

  #+BEGIN_SRC clojure
    (s/def ::system-key keyword?)
    (s/def ::system-id (s/and (s/keys :req [::kind ::system-key])
                              #(= :system (::kind %))))
    (defmethod id-spec :system [_] ::system-id)
    (s/def ::system ::system-id)
    (defmethod object-spec :system [_] ::system)
  #+END_SRC

A system doesn't hold its components: those are contained in entities and so
whenever a system would like to perform an operation on all of its components,
it must iterate over entities and their components (a component will have the key
of the system to which it belongs).

*TODO* - to nastepne:
  #+BEGIN_SRC clojure
    (defn system [key]
      {::kind :system
       ::system-key key})
    (s/fdef system
      :args (s/cat :key ::system-key)
      :ret (s/and ::system ::system-id ::id))

  #+END_SRC

*TODO* - a to nastepne? jak nie wszystko jeszcze bylo omowione (w szczegolnosci component)...

  #+BEGIN_SRC clojure


    (defn system-key [x]
      ;; x can be:
      ;; - system key itself (a keyword)
      ;; - a system id/object
      ;; - a component object
      (if (keyword? x) x (::system-key x)))
    (s/fdef system-key
      :args (s/cat :x (s/or :key ::system-key
                            :system (s/or :system ::system, :id ::system-id)
                            :component ::component))
      :ret ::system-key)

    (defn system-id [x]
      ;; x can be:
      ;; - system key
      ;; - a system id/object
      ;; - a component object
      (if (keyword? x)
        {::kind :system
         ::system-key x}
        (if (= (::kind x) :system)
          (to-id x)
          {::kind :system
           ::system-key (::system-key x)})))
    (s/fdef system-id
      :args (s/cat :x (s/or :key ::system-key
                            :system (s/or :system ::system, :id ::system-id)
                            :component ::component))
      :ret (s/and ::system-id ::id))

    (defn system-id? [x]
      (= (::kind x) :system))
    (s/fdef system-id?
      :args (s/cat :x anything?)
      :ret boolean?)

  #+END_SRC

* Component

** Schemas

  A component will be identified by a key

  #+BEGIN_SRC clojure
    (s/def ::component-key keyword?)
  #+END_SRC

  which is unique /in context of the entity/ to which the component belongs. In
  other words, we'll need to use both the entity key (to be defined later) and
  the component key to form a unique component identifier. Of course we'll also
  set =::kind= to =:component=.

  To simplify lookup operations, we'll also include the key of the system
  (again, defined later) to which the component belongs and the component type
  which will be used in dispatching of multimethods to give each type of
  component a different behavior. Here's then the schema of a component id:

  #+BEGIN_SRC clojure
    (s/def ::component-id (s/and
                           (s/keys :req [::kind
                                         ::entity-key ::component-key
                                         ::system-key ::component-type])
                           #(= (::kind %) :component)))
  #+END_SRC

  A component /object/ will consist of the component id and any other keys
  dependent on the type of the component, so our schema for a component
  object is the same as for the component id:

  #+BEGIN_SRC clojure
    (s/def ::component ::component-id)
  #+END_SRC

  And finally we fill the component methods for the general =::object= and
  =::id= schemas:

  #+BEGIN_SRC clojure
    (defmethod object-spec :component [_] ::component)
    (defmethod id-spec :component [_] ::component-id)
  #+END_SRC

** Constructors
  
  #+BEGIN_SRC clojure

    (defn component [entity key system type]
      {::kind :component
       ::entity-key (entity-key entity)
       ::system-key (system-key system)
       ::type type
       ::component-key key})

    (defn component-id [entity key]
      {::kind :component
       ::entity-key (entity-key entity)
       ::component-key key})

    (defn component? [x]
      (= (::kind x) :component))

  #+END_SRC

** Predicates / operations

  #+BEGIN_SRC clojure

    (defn component? [x]
      (= (::kind x) :component))

  #+END_SRC

* Entity
  
  *TODO*

  #+BEGIN_SRC clojure
    (s/def ::entity-key (s/or :keyword keyword? :number number?))
    (s/def ::entity-type keyword?)
    (s/def ::entity-id (s/keys :req [::kind ::entity-key]))
    (defmethod id-spec :entity [_] ::entity-id)
    (s/def ::entity (s/keys :req [::kind ::entity-key ::entity-type]))
    (defmethod object-spec :entity [_] ::entity)
  #+END_SRC

  #+BEGIN_SRC clojure

    (defn entity [key type]
      {::kind :entity
       ::entity-type type
       ::entity-key key
       ::components {}})
    (s/fdef entity
      :args (s/cat :key ::entity-key, :type ::entity-type)
      :ret ::entity)

    (defn entity-id [x]
      ;; x can be:
      ;; - entity key
      ;; - an entity id/object
      ;; - a component id/object
      (if (keyword? x)
        {::kind :entity
         ::entity-key x}
        (if (= (::kind x) :entity)
          (to-id x)
          {::kind :entity
           ::entity-key (::entity-key x)})))
    (s/fdef entity-id
      :args (s/cat :x (s/or :key ::entity-key
                            :entity ::entity
                            :entity-id ::entity-id
                            :component ::component
                            :component-id ::component-id))
      :ret ::entity-id)

    (defn entity-id? [x]
      (= (::kind x) :entity))
    (s/fdef entity-id?
      :args (s/cat :x anything?)
      :ret boolean?)

    (defn entity-key [x]
      ;; x can be:
      ;; - entity key itself (a keyword)
      ;; - an entity id/object
      ;; - a component id/object
      (if (keyword? x) x (::entity-key x)))
    (s/fdef entity-key
      :args (s/cat :x (s/or :key ::entity-key
                            :entity ::entity
                            :entity-id ::entity-id
                            :component ::component
                            :component-id ::component-id))
      :ret ::entity-key)

  #+END_SRC
  
* Inne

  #+BEGIN_SRC clojure

    ;; NOTE. The `id?` predicate is very simple, as it only checks for the presence of the ::kind attribute.
    ;; We assume that if the API is properly used and no external code manually creates maps with
    ;; keys in our namespace, then that check is sufficient to ensure that we have an object or id created by us.
    ;; If a user wants a full check, they can use spec directly: (s/valid? ::id x) or (s/valid? ::object x).
    (defn id? [x]
      (boolean (::kind x)))
    (s/fdef id?
      :args (s/cat :x anything?)
      :ret boolean?)

  #+END_SRC

  Each object is its own id, but not vice-versa.

  #+BEGIN_SRC clojure

    (defn to-id [object]
      (if (= (::kind object) :component)
        (select-keys object [::kind ::entity-key ::component-key])
        (select-keys object [::kind ::system-key ::entity-key ::component-key])))
    (s/fdef to-id
      :args (s/cat :object ::id)
      :ret ::id)

  #+END_SRC



* Cheat-sheet?


  #+BEGIN_SRC clojure :load no

  -key < -id <= -object


  CHYBA DODAMY ::system-key do component-id, zeby bylo ladnie wszedzie

  ::id ::object (id? <any>) (to-id <id>)

  ::world-id ::world (world-id) (world) (world-id? <any>)

  ::system-key ::system-id ::system
  (system <system-key>)
  (system-id <system key>|<component>) (system-id? <any>)
  (system-key <system-key>|<component>)

  ::component-key ::component-id ::component
  (component <entity-key> <system-key> <component-type>)
  (component-id <entity-key> <component-key>) ---- w takich miejscach trzeba tez dodawac
                                                   konwersje z obiektu:
                                                   (component-id <component>),
                                                   a wlasciwie:
                                                   (component-id <component-id)
  (component? <any>)

  ::entity-key ::entity-id ::entity ::entity-type
  (entity <entity key> <entity type>)
  (entity-id <entity key>|<component-id>)
  (entity-id?)

  ;*** Querying ************************************************************

  ; e.g. (all-systems <world>)

  ;*** Modifying ***********************************************************

  ; e.g. (remove-entity ...)

  ;*** Events **************************************************************

  #+END_SRC

